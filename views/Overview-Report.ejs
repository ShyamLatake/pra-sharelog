<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Overview Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/178f732bae.js" crossorigin="anonymous"></script>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script src="https://unpkg.com/cal-heatmap/dist/cal-heatmap.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/cal-heatmap/dist/cal-heatmap.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <link rel="icon" href="/test-images/logo.ico">

    <% if (theme === "dark") { %>
      <link href="/styles/dark/vertical-navbar.css" rel="stylesheet" type="text/css">
    <% } else { %>
      <link href="/styles/light/vertical-navbar.css" rel="stylesheet" type="text/css">
    <% } %>
    <% if (theme === "dark") { %>
      <link href="/styles/dark/Base.css" rel="stylesheet" type="text/css">
    <% } else { %>
      <link href="/styles/light/Base.css" rel="stylesheet" type="text/css">
    <% } %>
    
    <% if (theme === "dark") { %>
      <link href="/styles/dark/Overview-Report.css" rel="stylesheet" type="text/css">
    <% } else { %>
      <link href="/styles/light/Overview-Report.css" rel="stylesheet" type="text/css">
    <% } %>
</head>
<body>
    <div class="container0">
        <%- include("partials/vertical-navbar.ejs") %>

        <div class="horizontal-half">
          <%- include("partials/oopari-navbar.ejs", {Title: PageTitle, Name: Name, imgSrc: imgSrc}) %>
            
            <div class="container2">
              <div class="container-heading">
                <h1 class="main-heading">Overview Report</h1>
              </div>
              <div class="Bhandaari">   
                <div class="container-dropdown-buttons">      
                  <div class="dropdown-button">
                    <form id="myForm">
                      <div class="container-choose-heading">
                        <label for="options">Segment</label>
                      </div>
                      <div class="container-choose-button">
                        <select name="options" id="options">
                          <option value="equity">Equity</option>
                          <option value="commodity">Commodity</option>
                          <option value="fAndO">F&O</option>
                          <option value="currency">Currency</option>
                        </select>
                      </div>
                      <br><br>

                    </div> 
                    <div class="dropdown-from-button">
                      <div id="datePickerContainer">
                        <div class="container-from-heading">
                          <label for="from-datePicker">From</label>
                        </div>
                        <div class="container-from-button-input">
                          <input type="date" id="from-datePicker">
                        </div>
                      </div>
                    </div>   
                    <div class="dropdown-to-button">
                      <div id="datePickerContainer">
                        <div class="container-to-heading">
                          <label for="to-datePicker">To</label>
                        </div>
                        <div class="container-to-button-input">
                          <input type="date" id="to-datePicker">
                        </div>                     
                      </div>
                    </div>   
                    <div class="button-submit">
                      <button type="submit" class="newStrat">View</button>
                    </div>
                </form>
              </div>


              <div class="calContainer">
                <div id="cal-heatmap"></div>
              </div>
              
              <div class="container-color-notations">
                <div class="container-minloss">
                  <h6 class="heading-min-loss">Max. Loss</h6>
                </div>
                <!-- <div class="color-notation" style="background-color: #ededed;"></div> -->
                <div class="color-notation" style="background-color: #820300;"></div>
                <div class="color-notation" style="background-color: #BE3144;"></div>
                <div class="color-notation" style="background-color: #F05941;"></div>
                <div class="color-notation" style="background-color: #F99B7D;"></div>
                <div class="container-maxloss">
                  <h6 class="heading-max-loss">Min. Loss</h6>
                </div>

                <!-- <div class="color-notation" style="background-color: #FFF67E; margin-left: 15px;"></div> -->
                
                <div class="container-minprofit" style="margin-left: 15px;">
                  <h6 class="heading-min-profit">Min. Profit</h6>
                </div>
                <div class="color-notation" style="background-color: #BFEA7C;"></div>
                <div class="color-notation" style="background-color: #BED754;"></div>
                <div class="color-notation" style="background-color: #9BCF53;"></div>
                <div class="color-notation" style="background-color: #416D19;"></div>
                <!-- <div class="color-notation" style="background-color: #BED754;"></div> -->
                <div class="container-maxprofit" >
                  <h6 class="heading-max-profit">Max. Profit</h6>
                </div>

              </div>
              <span class="Spacer"></span>
              <div class="container-heading">
                <h1 class="main-heading">Your Trades</h1>
              </div>

              <div class="positionsDiv">
                <% if (carouselData.length == 0) { %>
                  <div class="nothingness">
                      <h1> Your trades will appear here üôãüèª‚Äç‚ôÇÔ∏è </h1>
                  </div>
                <% } else { %>

                  <div class="container-carousel">
                    <div id="carouselExample" class="carousel slide">
                      <% carouselData.forEach((item, index) => { %>
                      <div class="carousel-inner">
                          <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                          <div class="container-fetched-content">
  
                            <div class="Lulla">
                                <% if (item.profit < 0) { %>
                                    <h2 class="amount-heading" style="color: red;"><%= item.profit %></h2>
                                <% } else { %>
                                    <h2 class="amount-heading" style="color: green"><%= item.profit %></h2>
                                <% } %>
                                <h3 class="p-and-l-heading" style="color: antiquewhite;"> <%= item.tradingSymbol %></h3>
                            </div>
                            
                            <div class="amount-and-day">
                              <div class="amount">
                                
                                <div class="hidden-date" style="display: none;"><%= item.dateOfBuy %></div>
                                <div class="day-drop">
                                      <h4 class="dropdownt day-and-date-heading" style="color: rgb(196, 237, 184);"></h4>
                                </div>
                              </div>
                              <div class="day-dropdown">
                                <h5 class="dropdown" style="color: white;"><%= item.dayOfBuy%></h5>
                              </div>
                            </div>
          
                          </div>
                          
                          <div class="container-chart">
                            <div class="container-candelstick-chart" id="<%=item._id%>" style="height: 400px; width: 100%;">
                            </div>
                          </div>
                          
                          <% console.log(String(item.audioObject)); %>
                          
                          <% if (item.audioObject==null || item.audioObject == undefined) { %>
  
                              <!--? Audio not present. Provide mic options -->
  
                              <div class="container-mic-control">
                                <div class="container-mic-button">
                                  <button class="mic-button" id="<%=item._id%>">
                                    <i class="fa-solid fa-microphone-lines"></i>
                                  </button>
                                </div>
                                <div class="container-three-lines">
                                  <button class="three-lines" id="<%=item._id%>">
                                    <i class="fa-solid fa-stop"></i>
                                  </button>
                                </div>
                              </div>
  
                          <% } else { %>
  
                              <!--? Audio already present. Provide play options -->
  
                              <div class="container-audio-control">
                                <div class="container-audio-rewind-button">
                                  <button class="rewind-button" id="<%=item._id%>">
                                    <i class="fa-solid fa-rotate-left"></i>
                                  </button>
                                </div>
                                <div class="container-audio-play-button">
                                  <button class="play-button" id="<%=item._id%>">
                                    <i class="fa-solid fa-play"></i></button>
                                </div>
                                <div class="container-audio-forward-button">
                                  <button class="forward-button" id="<%=item._id%>"><i class="fa-solid fa-rotate-right"></i></button>
                                </div>
                              </div>
  
  
                          <% } %>
  
                          <div class="biharKeLala">
                            <div class="newAndSave">
                              <div class="input-group neecheWala">
                                  <form class="form-inline" action="/SaveDataForPos" method="post">
                                    <input type="text" hidden name="posId" value="<%=item._id%>">
                                    <input type="text" hidden name="pageName" value="/<%=PageTitle%>">
                                    <!-- <div class="container-choose-heading">
                                      <label for="options">Strategies</label>
                                    </div> -->
                                    <div class="container-choose-button">
                                      <select name="strat" id="options">
                                        <option name="strat" selected value="Select Strategy">Select Strategy</option>
                                        <% Strategies.forEach((strategy, index) => { %>

                                            <% if(strategy[0] == item.strategyUsed) { %>
                                              <option name="strat" selected value="<%=strategy[0]%>"><%=strategy[0]%></option>
                                            <% } else { %>
                                              <option name="strat" value="<%=strategy[0]%>"><%=strategy[0]%></option>
                                            <% } %>

                                        <% }) %>
                                      </select>
                                    </div>
                                    <br>

                                    <% if(item.text.length == 0) { %>
                                      <input type="text" class="form-control addNewDesc " placeholder="Add Notes for this trade..." name="Descr">
                                    <% } else { %>
                                      <input type="text" class="form-control addNewDesc " placeholder="<%= item.text %>" name="Descr">
                                    <% } %>

                                    
                                    <button type="submit" class="newStrat">Save</button>
                                  </form>
                              </div>
                            </div>
                          </div>  

                        </div>
                      </div>
                      <% }); %>
                      <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                      </button>
                      <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                      </button>
                    </div>
                  </div>
                  
                  <audio id="audioPlayer" controls style="display: none;">
                    <source id="audioSource" type="audio/mpeg">
                    Your browser does not support the audio element.
                  </audio>

                  <% } %>
              </div>

              <span class="Spacer"></span>
              <div class="container-heading">
                <h1 class="main-heading">Generated Report</h1>
              </div>

              <div class="Bhandaari2">          
                <div class="container-of-containers">
                  <div class="container-cards card1">
                    <div class="card-body">
                      <h5 class="card-title">Account Balance</h5>
                      <p class="card-text"> <%= AccBalance %> </p>
                    </div>
                  </div>
                  <div class="container-cards card2">
                    <div class="card-body">
                      <h5 class="card-title">Returns</h5>
                      <p class="card-text"><%= CumRet %></p>
                    </div>
                  </div>
                  <div class="container-cards card2">
                    <div class="card-body">
                      <h5 class="card-title">Net Return</h5>
                      <p class="card-text"><%= NonCumRet %></p>
                    </div>
                  </div>
                  <div class="container-cards card3">
                    <div class="card-body">
                      <h5 class="card-title">Returns (avg)</h5>
                      <p class="card-text"><%= DaiRet %></p>
                    </div>
                  </div>
                </div>
                <div class="container-of-containers">
                  <div class="container-cards card4">
                    <div class="card-body">
                      <h5 class="card-title">Return On Win (avg)</h5>
                      <p class="card-text"><%= RetWin %></p>
                    </div>
                  </div>
                  <div class="container-cards card5">
                    <div class="card-body">
                      <h5 class="card-title">Return On Loss (avg)</h5>
                      <p class="card-text"><%= RetLoss %></p>
                    </div>
                  </div>
                  <div class="container-cards card5">
                    <div class="card-body">
                      <h5 class="card-title">Biggest Profit</h5>
                      <p class="card-text"><%= BigPro %></p>
                    </div>
                  </div>
                  <div class="container-cards card6">
                    <div class="card-body">
                      <h5 class="card-title">Biggest Loss</h5>
                      <p class="card-text"><%= BigLoss %></p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div> 
    </div>
    

    <script type="text/javascript">

      window.onload = function () {
        const micButtons = document.querySelectorAll('.mic-button');

        micButtons.forEach(button => {
            button.addEventListener('click', function() {
              startRecording(button.id); // Pass the button ID to the startRecording function
          });
        });

        const stopButtons = document.querySelectorAll('.three-lines');

        stopButtons.forEach(button => {
          button.addEventListener('click', function() {
            stopRecording(); // Pass the button ID to the startRecording function
          });
        });

        let mediaRecorder; // Variable to store the MediaRecorder object
        var chunks = []; // Array to store recorded audio chunks
        let audBlob;
        // Function to handle recording when the mic button is clicked

        function startRecording(buttonId) {
            chunks = [];
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(stream => {
                    mediaRecorder = new MediaRecorder(stream);

                    // Event listener for dataavailable event
                    mediaRecorder.ondataavailable = function(e) {
                        chunks.push(e.data);
                    };

                    // Event listener for stop event
                    mediaRecorder.onstop = function() {
                        const audioBlob = new Blob(chunks, { type: 'audio/wav' });
                        const audioUrl = URL.createObjectURL(audioBlob);
                        console.log('Recording stopped for', buttonId,'Audio URL:', audioUrl);
                        const reader = new FileReader();
                        reader.readAsDataURL(audioBlob);
                        reader.onloadend = function() {
                            const audioData = reader.result.split(',')[1]; // Extract base64-encoded audio data
                            console.log(audioData);
                            sendAudioToBackend(buttonId, audioData);
                        };
                        mediaRecorder.stop();
                    };

                    // Start recording
                    mediaRecorder.start();

                    console.log('Recording started...');
                })
                .catch(err => {
                    console.error('Error accessing microphone:', err);
                });
        }

        async function sendAudioToBackend(buttonId, audioData) {
            try {
                const response = await fetch('/saveAudio', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      buttonId: buttonId,
                      audio: audioData
                    })
                }).then(response => {
                    if (response.ok) {
                        // Successful response, reload the page
                        location.reload();
                    } else {
                        // Handle error responses
                        console.error('Failed to save audio data:', response.statusText);
                    }
                }).catch(error => {
                    // Handle network errors
                    console.error('Error saving audio data:', error);
                });
            } catch (error) {
                console.error('Error sending recording to backend:', error);
            }
        }


        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
            } else {
                console.warn('No active recording to stop.');
            }
        }

        const playButtons = document.querySelectorAll('.play-button');

        let audioPlayer, audioSource;

        playButtons.forEach(button => {
            button.addEventListener('click', async function() {
              console.log("Request to play audio for object", button.id);
          
              try {
                    const response = await fetch('/playAudio', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          buttonId: button.id
                        })
                    }).then(response => {
                          console.log(response.body);
                          if (response.ok) {
                              return response.blob(); // Convert response to array buffer
                          } else {
                              throw new Error('Failed to retrieve audio data');
                          }
                      })
                      .then(blob => {
                        audioPlayer = document.getElementById('audioPlayer');
                        audioSource = document.getElementById('audioSource');
                        
                        // Create a URL from the blob
                        const audioUrl = URL.createObjectURL(blob);
                        
                        // Set the audio source
                        audioSource.src = audioUrl;
                        audioPlayer.load(); // Load the new source

                        // Play the audio
                        audioPlayer.play();
                      })
                      .catch(error => {
                          console.error('Error playing audio:', error);
                      });
                } catch (error) {
                    console.error('Error sending recording to backend:', error);
                }
        });
        });

        const rewindButtons = document.querySelectorAll('.rewind-button');

        rewindButtons.forEach(button => {
            button.addEventListener('click', function() {
              console.log("Request to rewind audio for object", button.id);
              audioPlayer.currentTime -= 5;
          });
        });

        const forwButtons = document.querySelectorAll('.forward-button');

        forwButtons.forEach(button => {
            button.addEventListener('click', function() {
              console.log("Request to forw audio for object", button.id);
              audioPlayer.currentTime += 5;
          });
        });      

      var prop= "equity";

      function parseNestedObjects(data) {
        if (Array.isArray(data)) {
            return data.map(item => {
                for (const key in item) {
                    if (typeof item[key] === 'string') {
                        try {
                            item[key] = JSON.parse(item[key]);
                        } catch (error) {
                            // If parsing fails, continue with the original value
                        }
                    } else if (typeof item[key] === 'object' && item[key] !== null) {
                        parseNestedObjects(item[key]);
                    }
                }
                return item;
            });
        } else if (typeof data === 'string') {
            try {
                return JSON.parse(data);
            } catch (error) {
                console.error('Error parsing JSON string:', error);
                return null;
            }
        } else {
            console.error('Invalid input type. Expected array or string.');
            return null;
        }
    }

      const cal = new CalHeatmap();
      // console.log("Huihui: "+data);
      var data= <%-JSON.stringify(calData)%>;
      console.log(data);

      function filterPositionsByDate(positions, startDate, endDate) {
        // console.log(new Date(startDate), new Date(endDate));
          return positions.filter(position => {
              const positionDate = new Date(position.dateOfBuy);
              // console.log(positionDate);
              return positionDate >= new Date(startDate) && positionDate <= new Date(endDate);
          });
      }

      function resetValuesBetweenDates(data, prop, startDate, endDate) {
        for (let i = 0; i < data.length; i++) {
          if (data[i].date >= startDate && data[i].date <= endDate){
            if (prop !== 'equity') data[i].equity = -5;
            if (prop !== 'commodity') data[i].commodity = -5;
            if (prop !== 'fAndO') data[i].fAndO = -5;
            if (prop !== 'currency') data[i].currency = -5;
          }
          else{
            data[i].equity = -5;
            data[i].commodity = -5;
            data[i].fAndO = -5;
            data[i].currency = -5;
          }
        }
        const tooltip = document.createElement('div');  

        cal.on('mouseover', (event, timestamp, value) => {
            tooltip.className = 'custom-tooltip'; // You can style this class in your CSS

            const formattedDate = new Date(timestamp).toLocaleDateString();

            // tooltip.innerHTML = `On <b>${formattedDate}</b>, the max temperature was ${value}¬∞C`;
            tooltip.innerHTML = `<b>${formattedDate}</b>`;
            tooltip.style.position = 'absolute';
            tooltip.style.left = `${event.pageX + 10}px`;
            tooltip.style.top = `${event.pageY + 10}px`; 

            document.body.appendChild(tooltip);
        });
        cal.on('mouseout', () => {
            document.body.removeChild(tooltip);
        });
        cal.paint({ 
            itemSelector: '#cal-heatmap',
            data: { source: data, x: 'date', y: prop },
            domain: { type: 'month', gutter: 8 },
            subDomain: {
                width: 15,
                height: 15,
                type: 'day',
                // label: 'D',  //Unocmment this to show dates 
            },
            date: {
                timezone: 'Asia/Calcutta', 
                start: new Date("2024-01-01"),
                highlight: [new Date()], // Highlight today
            },
            scale: {
                color: {
                    range: ["#ededed", "#820300", "#BE3144", "#F05941", "#F99B7D", "#FFF67E", "#BFEA7C", "#BED754", "#9BCF53", "#416D19"],
                    interpolate: d3.interpolateRgb,
                    type: 'linear',
                    domain: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4],
                },
            },
        });

        const carouselData = <%- JSON.stringify(carouselData) %>;
        const filteredPositions = filterPositionsByDate(<%-JSON.stringify(carouselData)%>, startDate, endDate);
        console.log("Filtered", filteredPositions);
        renderCarousel(filteredPositions);

        // carouselData= filteredPositions;
        // location.reload();

      }

      document.getElementById('myForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
            var fromDate = document.getElementById('from-datePicker').value;
            var toDate = document.getElementById('to-datePicker').value;
            var selectedOption = document.getElementById('options').value;
            console.log(typeof(fromDate), toDate, selectedOption);
            if(fromDate.length == 0)
              fromDate= "2024-01-01";
            if(toDate.length == 0)
              toDate= "2024-12-31";

            let clonedata = JSON.parse(JSON.stringify(data));
            resetValuesBetweenDates(clonedata, selectedOption, fromDate, toDate);
      });

      const tooltip = document.createElement('div');
      cal.on('mouseover', (event, timestamp, value) => {
          tooltip.className = 'custom-tooltip'; // You can style this class in your CSS

          const formattedDate = new Date(timestamp).toLocaleDateString();

          // tooltip.innerHTML = `On <b>${formattedDate}</b>, the max temperature was ${value}¬∞C`;
          tooltip.innerHTML = `<b>${formattedDate}</b>`;
          tooltip.style.position = 'absolute';
          tooltip.style.left = `${event.pageX + 10}px`;
          tooltip.style.top = `${event.pageY + 10}px`; 

          document.body.appendChild(tooltip);
      });
      cal.on('mouseout', () => {
          document.body.removeChild(tooltip);
      });
      cal.paint({ 
          itemSelector: '#cal-heatmap',
          data: { source: data, x: 'date', y: prop },
          domain: { type: 'month', gutter: 8 },
          subDomain: {
              width: 15,
              height: 15,
              type: 'day',
              // label: 'D',  //Uncomment this to show dates 
          },
          date: {
              timezone: 'Asia/Calcutta', 
              start: new Date("2024-01-01"),
              highlight: [new Date()], // Highlight today
          },
          scale: {
              color: {
                  range: ["#820300", "#BE3144", "#F05941", "#F99B7D", "#FFF67E", "#BFEA7C", "#BED754", "#9BCF53", "#416D19"],
                  interpolate: d3.interpolateRgb,
                  type: 'linear',
                  domain: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4],
              },
          },
      });

      
    async function renderCHarts() {
      console.log("Rendering");

    async function fetchData(userID) {
      var url = "/getChartData";
      var data = {
          userID: userID
      };

      var jsonData = JSON.stringify(data);

      var options = {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: jsonData
      };

      try {
          var response = await fetch(url, options);
          console.log(response);
          // Check if the response is successful
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }

          // Parse the JSON response
          var responseData = await response.json();
          // Process the JSON data received from the server
          console.log("Data received:", responseData);
          
          // Return the data
          return responseData;
      } catch (error) {
          // Handle any errors that occur during the request
          console.error('There was a problem with the fetch operation:', error);
          // Throw the error to propagate it to the caller
          throw error;
      }
  }


    let hui, averagedData, formattedData, chart, idd;
    // const averagedData = calculateAverage(Response, 1);
    

    <% for(const thisPosition of carouselData ) { %>

      // hui= document.getElementById("<%= thisPosition._id%>")
      // console.log(hui);
      idd = "<%= thisPosition._id%>";
      averagedData = await fetchData(idd);
      console.log(averagedData);
      // console.log("Got chart data: ", averagedData);
      // averagedData= Response;

      formattedData = [];
      for (let i = 0; i < averagedData.time.length; i++) {
          const dataPoint = {
              x: new Date(averagedData.time[i] * 1000), // Convert Unix timestamp to JavaScript Date object
              y: [averagedData.open[i], averagedData.high[i], averagedData.low[i], averagedData.close[i]]
          };
          formattedData.push(dataPoint);
      }
      chart = new CanvasJS.Chart("<%= thisPosition._id%>", {
        animationEnabled: true,
        theme: "dark",
        // title: {
        //     text: "Candlestick Chart"
        // },
        zoomEnabled: true, 
        zoomType: "xy",
        zoomDirection: "y", 
        panEnabled: true, 
        panDirection: "xy",
        exportEnabled: true,
        backgroundColor: "#15161a", 
        axisX: {
            title: "Time",
            titleFontColor: "white",
            titleFontSize: 15,
            valueFormatString: "HH:mm",
            interval: 1,
            intervalType: "minute",
            labelFontColor: "#15161a",
            labelWrap: true,
            labelAutoFit: true,
            crosshair: {
              enabled: true,
              color: "orange",
              labelFontColor: "#F8F8F8"
            },
        },
        axisY: {
            title: "Price",
            titleFontColor: "white",
            titleFontSize: 15,
            includeZero: false,
            labelFontColor: "#cccccc",
            position: "right",
            includeZero: false,
            crosshair: {
              enabled: true,
              color: "orange",
              labelFontColor: "#F8F8F8"
            }
        },
        toolTip: {
          animationEnabled: true,
          cornerRadius: 15,
          backgroundColor: "silver",
          // fontColor: "white"
        },
        // data: datat
        data: [{
            type: "candlestick",
            risingColor: "#00ff00",
            fallingColor: "#ff0000",
            color: "#15161a",
            dataPoints: formattedData
        }]
      });

      chart.render();
    <% } %>
    }
    
    renderCHarts()
    $('#carouselExample').on('slid.bs.carousel', function () {
      renderCHarts()
    })
    }
  </script>
</body>
</html>